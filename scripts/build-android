#!/usr/bin/env python

#
#    Copyright Topology LP 2016
#

import argparse
import os
import sys
import shutil
import android_build_lib
import build_lib

parser = argparse.ArgumentParser()
parser.add_argument("-c", "--clean", help="force clean build", action="store_true")
parser.add_argument("-v", "--verbose", help="produces additional output for dianostics", action="store_true")
parser.add_argument("-r", "--release", help="release build, default to debug", action="store_true")
parser.add_argument("-j", "--jobs", help="Specify how many commands can run in parallel", type=int, default=build_lib.get_num_cores())
parser.add_argument("-a", "--architecture", help="specify architecture",  choices=["arm", "arm64", "x86", "x86_64"], default="arm64")

args = parser.parse_args()

print "TGL Build - Android"
print "Architecture: {}".format(args.architecture)

if args.release:
    print "Build type: RELEASE"
else:
    print "Build type: DEBUG"

if args.clean:
    print "Performing clean build"

if args.verbose:
    print "Verbose output"

print "Number of jobs: {}".format(args.jobs)

DEV_DIR = build_lib.get_dev_dir()
MAIN_DIR = build_lib.get_main_dir()
BUILD_DIR = android_build_lib.get_build_dir(args.architecture, args.release)
INSTALL_PREFIX = android_build_lib.get_install_prefix(args.architecture, args.release)

if args.clean and os.path.exists(BUILD_DIR):
    shutil.rmtree(BUILD_DIR)

ANDROID_TOOLCHAIN_ROOT = android_build_lib.get_toolchain_dir(args.architecture)
ANDROID_ABI = android_build_lib.get_abi(args.architecture)
os.environ["ANDROID_STANDALONE_TOOLCHAIN"] = ANDROID_TOOLCHAIN_ROOT

TOOLCHAIN_FILE = android_build_lib.get_cmake_toolchain()
CMAKE_COMMAND = "cmake -G Ninja" + \
    " -D CMAKE_TOOLCHAIN_FILE=" + TOOLCHAIN_FILE + \
    " -D CMAKE_INSTALL_PREFIX=" + INSTALL_PREFIX + \
    " -D ANDROID_ABI=" + ANDROID_ABI + \
    " -D CMAKE_BUILD_TYPE=" + ("Release" if args.release else "Debug")

# build cmake repo
def build_cmake_repo(repo_name, repo_extra_path, definitions):
    repo_abs_path = os.path.join(MAIN_DIR, repo_name)
    repo_build_dir = os.path.join(BUILD_DIR, repo_name)

    if not os.path.exists(repo_build_dir):
        os.makedirs(repo_build_dir)

    os.chdir(repo_build_dir)
    if not os.path.exists("build.ninja"):
        command = CMAKE_COMMAND + " " + definitions + " ../../../" + repo_extra_path + repo_name
        r = build_lib.run_command(command, args.verbose)
        if r != 0:
            return r

    command = "ninja -j " + str(args.jobs)
    if args.verbose:
        command += " -v"
    r = build_lib.run_command(command, args.verbose)
    if r != 0:
        return r
    command += " install"
    return build_lib.run_command(command, args.verbose)

exit(build_cmake_repo("", "", ""))
