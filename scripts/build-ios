#!/usr/bin/env python

#
#    Copyright Topology LP 2016
#

import argparse
import glob
import os
import re
import sys
import shutil
import subprocess
import build_lib

parser = argparse.ArgumentParser()
parser.add_argument("-c", "--clean", help="force clean build", action="store_true")
parser.add_argument("-v", "--verbose", help="produces additional output for dianostics", action="store_true")
parser.add_argument("-r", "--release", help="release build, default to debug", action="store_true")
parser.add_argument("-j", "--jobs", help="Specify how many commands can run in parallel", type=int, default=build_lib.get_num_cores())
parser.add_argument("-a", "--architecture", help="specify architecture",  choices=["armv7", "arm64", "i386", "x86_64"], default="arm64")
parser.add_argument("--asan", help="build with ASAN", action="store_true")
parser.add_argument("--tsan", help="build with TSAN", action="store_true")
args = parser.parse_args()

print "TGL Build - iOS"
print "Architecture: {}".format(args.architecture)

if args.release:
    print "Build type: RELEASE"
else:
    print "Build type: DEBUG"

if args.clean:
    print "Performing clean build"

if args.verbose:
    print "Verbose output"

print "Number of jobs: {}".format(args.jobs)

DEV_DIR = build_lib.get_dev_dir()
MAIN_DIR = build_lib.get_main_dir()
BUILD_DIR = os.path.join(MAIN_DIR, "build-ios", "release" if args.release else "debug", args.architecture)
INSTALL_PREFIX = os.path.join(DEV_DIR, "staging-ios", "release" if args.release else "debug", args.architecture)

if args.clean and os.path.exists(BUILD_DIR):
    shutil.rmtree(BUILD_DIR)

MIN_IOS_SDK_VERSION = "10.0"
if args.architecture == "x86_64" or args.architecture == "i386":
    IS_SIMULATOR = True
    VERSION_FLAGS = "-mios-simulator-version-min=" + MIN_IOS_SDK_VERSION
else:
    IS_SIMULATOR = False
    VERSION_FLAGS = "-mios-version-min=" + MIN_IOS_SDK_VERSION

if IS_SIMULATOR:
    BASEDIR = os.path.join(subprocess.check_output("xcrun --sdk iphonesimulator --show-sdk-platform-path", shell=True).rstrip(), "Developer")
    SDK = subprocess.check_output("xcrun --sdk iphonesimulator --show-sdk-path", shell=True).rstrip()
    if args.architecture == "i386":
        COMPILER_ARCH = "i386"
    else:
        COMPILER_ARCH = "x86_64"
else:
    BASEDIR = os.path.join(subprocess.check_output("xcrun --sdk iphoneos --show-sdk-platform-path", shell=True).rstrip(), "Developer")
    SDK = subprocess.check_output("xcrun --sdk iphoneos --show-sdk-path", shell=True).rstrip()
    if args.architecture == "armv7":
        COMPILER_ARCH = "armv7"
    else:
        COMPILER_ARCH = "arm64"

os.environ["CMAKE_PREFIX_PATH"] = INSTALL_PREFIX + os.pathsep + os.getenv("CMAKE_PREFIX_PATH", "")

CMAKE_COMMAND = "cmake -GNinja"
CMAKE_COMMAND += " -DCMAKE_C_COMPILER_WORKS=ON"
CMAKE_COMMAND += " -DCMAKE_CXX_COMPILER_WORKS=ON"
CMAKE_COMMAND += " -DCMAKE_OSX_SYSROOT=" + SDK
CMAKE_COMMAND += " -DCMAKE_LIBRARY_PATH=" + os.path.join(SDK, "usr", "lib")
CMAKE_COMMAND += " -DCMAKE_OSX_ARCHITECTURES=" + COMPILER_ARCH
CMAKE_COMMAND += " -DCMAKE_INSTALL_PREFIX=" + INSTALL_PREFIX
CMAKE_COMMAND += " -DCMAKE_C_FLAGS=" + VERSION_FLAGS
CMAKE_COMMAND += " -DCMAKE_CXX_FLAGS=" + VERSION_FLAGS
CMAKE_COMMAND += " -DENABLE_ASAN=" + ("1" if args.asan else "0")
CMAKE_COMMAND += " -DENABLE_TSAN=" + ("1" if args.tsan else "0")
CMAKE_COMMAND += " -DCMAKE_BUILD_TYPE=" + ("RelWithDebInfo" if args.release else "Debug")

def exit_if_failed(return_code = 1, msg = "Forget to build dependencies?"):
    if return_code != 0:
        print msg
        exit(return_code)

# build cmake repo
def build_cmake_repo(repo_name, repo_extra_path, definitions):
    repo_src_path = os.path.join(MAIN_DIR, repo_name)
    repo_build_dir = os.path.join(BUILD_DIR, repo_name)

    if not os.path.exists(repo_build_dir):
        os.makedirs(repo_build_dir)

    os.chdir(repo_build_dir)
    if not os.path.exists("build.ninja"):
        command = CMAKE_COMMAND + " " + definitions
        if (args.verbose):
            command += " -v "
        command += " ../../../" + repo_extra_path + repo_name
        r = build_lib.run_command(command, args.verbose)
        if r != 0:
            return r

    command = "ninja -j " + str(args.jobs)
    if args.verbose:
        command += " -v"
    r = build_lib.run_command(command, args.verbose)
    if r != 0:
        return r
    command += " install"
    return build_lib.run_command(command, args.verbose)

exit_if_failed(build_cmake_repo("", "", ""))
