#!/usr/bin/env python

import argparse
import os
import sys
import shutil
import subprocess
import build_lib

parser = argparse.ArgumentParser()
parser.add_argument("-c", "--clean", help="force clean build", action="store_true")
parser.add_argument("-v", "--verbose", help="produces additional output for dianostics", action="store_true")
parser.add_argument("-r", "--release", help="release build, default to debug", action="store_true")
parser.add_argument("-j", "--jobs", help="Specify how many commands can run in parallel", type=int, default=build_lib.get_num_cores())
parser.add_argument("--asan", help="build with ASAN", action="store_true")
parser.add_argument("--tsan", help="build with TSAN", action="store_true")
parser.add_argument("--ubsan", help="build with UBSAN", action="store_true")
parser.add_argument("--workaround-valgrind", help="build with working around valgrind", action="store_true")

args = parser.parse_args()

print "TGL Build"

if args.release:
    print "Build type: RELEASE"
else:
    print "Build type: DEBUG"

if args.clean:
    print "Performing clean build"

if args.verbose:
    print "Verbose output"

print "Number of jobs: {}".format(args.jobs)

if "clang" in os.getenv("CXX", "") or "clang" in subprocess.check_output(["c++", "--version"]):
    os.environ["CXXFLAGS"] = os.getenv("CXXFLAGS", "") + " -stdlib=libc++"
    os.environ["LDFLAGS"] = os.getenv("LDFLAGS", "") + " -stdlib=libc++"

DEV_DIR = build_lib.get_dev_dir()
MAIN_DIR = build_lib.get_main_dir()
BUILD_DIR = build_lib.get_build_dir(args.release)
INSTALL_PREFIX = build_lib.get_host_install_prefix(args.release)
DJINNI_MODULE_PATH = os.path.join(DEV_DIR, "djinni_modules")
if not os.path.exists(DJINNI_MODULE_PATH):
    os.makedirs(DJINNI_MODULE_PATH)

if args.clean and os.path.exists(BUILD_DIR):
    shutil.rmtree(BUILD_DIR)

os.environ["CMAKE_PREFIX_PATH"] = INSTALL_PREFIX + os.pathsep + os.getenv("CMAKE_PREFIX_PATH", "")

CMAKE_COMMAND = "PKG_CONFIG_PATH=" + \
    " PKG_CONFIG_LIBDIR=" + os.path.join(INSTALL_PREFIX, "lib", "pkgconfig") + \
    " cmake -G Ninja" +  \
    " -D CMAKE_INSTALL_PREFIX=" + INSTALL_PREFIX + \
    " -D CMAKE_BUILD_TYPE=" + ("Release" if args.release else "Debug") + \
    " -D ENABLE_ASAN=" + ("1" if args.asan else "0") + \
    " -D ENABLE_TSAN=" + ("1" if args.tsan else "0") + \
    " -D ENABLE_UBSAN=" + ("1" if args.ubsan else "0") + \
    " -D ENABLE_VALGRIND_FIXES=" +("1" if args.workaround_valgrind else "0")

def exit_if_failed(return_code = 1, msg = "Forget to build dependencies?"):
    if return_code != 0:
        print msg
        exit(return_code)

def build_cmake_repo(repo_name, repo_extra_path, definitions):
    repo_abs_path = os.path.join(MAIN_DIR, repo_name)
    repo_build_dir = os.path.join(BUILD_DIR, repo_name)

    if not os.path.exists(repo_build_dir):
        os.makedirs(repo_build_dir)

    os.chdir(repo_build_dir)
    if not os.path.exists("build.ninja"):
        command = CMAKE_COMMAND + " " + definitions + " ../../" + repo_extra_path + repo_name
        r = build_lib.run_command(command, args.verbose)
        if r != 0:
            return r

    command = "ninja -j " + str(args.jobs)
    if args.verbose:
        command += " -v"
    r = build_lib.run_command(command, args.verbose)
    if r != 0:
        return r
    command += " install"
    return build_lib.run_command(command, args.verbose)

exit_if_failed(build_cmake_repo("", "", ""))
