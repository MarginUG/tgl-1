#!/usr/bin/env python

import argparse
import glob
import os
import shutil
import build_lib

parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="produces additional output for dianostics", action="store_true")
parser.add_argument("-c", "--clean", help="force clean build", action="store_true")
parser.add_argument("-r", "--release", help="release build, default to debug", action="store_true")
parser.add_argument("-a", "--architecture", help="specify architecture",  choices=["all", "device", "simulator", "armv7", "arm64", "i386", "x86_64"], default="arm64")
parser.add_argument("-j", "--jobs", help="Specify how many commands can run in parallel", type=int, default=build_lib.get_num_cores())
parser.add_argument("--asan", help="Build with ASAN", action="store_true")
args = parser.parse_args()

print "TplgyTGL SDK Build - iOS"
print "Architecture: {}".format(args.architecture)

if args.verbose:
    print "Verbose output"

# Set up a bunch of useful variables and paths
dev_dir = build_lib.get_dev_dir()
main_dir = build_lib.get_main_dir()
xcode_project_path = os.path.join(main_dir, "platform", "ios", "sdk")
configuration = ("Release" if args.release else "Debug")
framework_name = "TplgyTGL"
framework_dir = framework_name + ".framework"
build_dir = os.path.join(xcode_project_path, "build")
device_framework_path = os.path.join(build_dir, configuration + "-iphoneos", framework_dir)
simulator_framework_path = os.path.join(build_dir, configuration + "-iphonesimulator", framework_dir)
universal_framework_dir = os.path.join(build_dir, configuration + "-iphoneuniversal")
universal_framework_path = os.path.join(universal_framework_dir, framework_dir)
install_path = os.path.join(dev_dir, "staging-ios", "Frameworks", framework_dir)
DJINNI_MODULE_PATH = os.path.join(dev_dir, "djinni_modules")
if not os.path.exists(DJINNI_MODULE_PATH):
    os.makedirs(DJINNI_MODULE_PATH)

os.chdir(xcode_project_path)

# Builds ObjC framework for a list of architectures
def build_objc_framework(arches):
    command = "python " + os.path.join(main_dir, "scripts", "build-ios-native")
    if args.release:
        command += " -r"
    if args.clean:
        command += " -c"
    if args.verbose:
        command += " -v"
    if args.asan:
        command += " --asan"
    command += " -j " + str(args.jobs)
    for a in arches:
        r = build_lib.run_command(command + " -a " + a, args.verbose)
        if r != 0:
            return r
    command = "python " + os.path.join(main_dir, "scripts", "build-objc-framework")
    if args.release:
        command += " -r -s"
    r = build_lib.run_command(command, args.verbose)
    if r != 0:
        return r

    return 0

arch = args.architecture
if arch == "all":
    # Build the ObjC framework for all architectures
    r = build_objc_framework(["armv7", "arm64", "i386", "x86_64"])
    if r != 0:
        exit(r)

    # Build the SDK Swift framework for all architectures, device and simulator
    command = "xcodebuild ONLY_ACTIVE_ARCH=NO -configuration " + configuration + " -sdk iphoneos"
    r = build_lib.run_command(command, args.verbose)
    if r != 0:
        exit(r)
    command = "xcodebuild ONLY_ACTIVE_ARCH=NO -configuration " + configuration + " -sdk iphonesimulator"
    r = build_lib.run_command(command, args.verbose)
    if r != 0:
        exit(r)

    if os.path.exists(universal_framework_dir):
        shutil.rmtree(universal_framework_dir)

    # Create a directory to put the universal framework in
    os.makedirs(universal_framework_dir)
    # Copy the device framework files over first
    shutil.copytree(device_framework_path, universal_framework_path)
    # "Lipo" the device and simulator dynamic libraries together into a universal binary
    command = "lipo -create " + os.path.join(device_framework_path, framework_name) + " " + \
            os.path.join(simulator_framework_path, framework_name) + \
            " -o " + os.path.join(universal_framework_path, framework_name)
    r = build_lib.run_command(command, args.verbose)
    if r != 0:
        exit(r)

    # Copy over the simulator swiftmodule files
    swift_module_dir = os.path.join("Modules", framework_name + ".swiftmodule")
    files = glob.iglob(os.path.join(os.path.join(simulator_framework_path, swift_module_dir, "*.swiftmodule")))
    for f in files:
        shutil.copy2(f, os.path.join(universal_framework_path, swift_module_dir))
    files = glob.iglob(os.path.join(os.path.join(simulator_framework_path, swift_module_dir, "*.swiftdoc")))
    for f in files:
        shutil.copy2(f, os.path.join(universal_framework_path, swift_module_dir))

    shutil.copy2(os.path.join(main_dir, "objc", "strip-frameworks.sh"), universal_framework_path)

    if os.path.exists(install_path):
        shutil.rmtree(install_path)

    # Copy the framework to the install prefix
    shutil.copytree(universal_framework_path, install_path)

else:
    # Build the ObjC framework and SDK Swift framework for a particular architecture
    if arch == "device":
        arches = ["armv7", "arm64"]
    elif arch == "simulator":
        arches = ["i386", "x86_64"]
    else:
        arches = [arch]
    r = build_objc_framework(arches)
    if r != 0:
        exit(r)
    if arch == "simulator" or arch == "i386" or arch == "x86_64":
        sdk = "iphonesimulator"
    else:
        sdk = "iphoneos"

    other_cflags=""
    other_cxxflags=""
    other_ldflags=""
    if args.asan:
        other_cflags="-fsanitize=address"
        other_cxxflags="-fsanitize=address"
        other_ldflags="-fsanitize=address"

    command = "xcodebuild CC=clang++ OTHER_CFLAGS=" + other_cflags + " OTHER_CXXFLAGS=" + other_cxxflags + " OTHER_LDFLAGS=" + other_ldflags + " ONLY_ACTIVE_ARCH=NO -configuration " + configuration + " -sdk " + sdk
    if arch != "device" and arch != "simulator":
        command += " ARCHS=\"" + arch + "\""

    r = build_lib.run_command(command, args.verbose)
    if r != 0:
        exit(r)

    if os.path.exists(install_path):
        shutil.rmtree(install_path)

    # Copy the framework to the install prefix
    shutil.copytree(os.path.join(build_dir, configuration + "-" + sdk, framework_dir), install_path)
    shutil.copy2(os.path.join(main_dir, "objc", "strip-frameworks.sh"), install_path)
